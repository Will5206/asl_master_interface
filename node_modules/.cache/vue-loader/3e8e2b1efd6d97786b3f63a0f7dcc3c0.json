{"remainingRequest":"/Users/will5206/Desktop/master_interface/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/will5206/Desktop/master_interface/src/components/Search.vue?vue&type=style&index=0&id=7cb41050&lang=scss&scoped=true","dependencies":[{"path":"/Users/will5206/Desktop/master_interface/src/components/Search.vue","mtime":1705646185481},{"path":"/Users/will5206/Desktop/master_interface/node_modules/css-loader/dist/cjs.js","mtime":1704319707203},{"path":"/Users/will5206/Desktop/master_interface/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1704319707425},{"path":"/Users/will5206/Desktop/master_interface/node_modules/postcss-loader/src/index.js","mtime":1704319707260},{"path":"/Users/will5206/Desktop/master_interface/node_modules/sass-loader/dist/cjs.js","mtime":1704319707089},{"path":"/Users/will5206/Desktop/master_interface/node_modules/cache-loader/dist/cjs.js","mtime":1704319707089},{"path":"/Users/will5206/Desktop/master_interface/node_modules/vue-loader/lib/index.js","mtime":1704319707297}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgIkAvYXNzZXRzL3N0eWxlcy9fdmFyaWFibGVzLnNjc3MiOwpAaW1wb3J0ICJAL2Fzc2V0cy9zdHlsZXMvX21peGlucy5zY3NzIjsKCmJ1dHRvbiB7CiAgYm9yZGVyOiBub25lOwogIGJhY2tncm91bmQtY29sb3I6ICRhY2NlbnQ7CiAgZm9udC13ZWlnaHQ6IDYwMDsKICBAaW5jbHVkZSBmcygwKTsKICBwYWRkaW5nOiAwLjVyZW0gMXJlbTsKICB3aWR0aDogMTAwJTsKICBjdXJzb3I6IHBvaW50ZXI7CiAgdXNlci1zZWxlY3Q6IG5vbmU7CiAgJjpob3ZlciB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYWNjZW50OwogIH0KICAmOmFjdGl2ZSB7CiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMXB4KTsKICB9Cn0KCiNyZXN1bHRzIHsKICBkaXNwbGF5OiBncmlkOwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjsKICBtYXJnaW4tdG9wOiAxNnB4OwogIGdhcDogMTZweDsKfQoKI3Jlc3VsdHMtaGVhZGVyIHsKICBncmlkLWNvbHVtbjogMSAvIC0xOwogIHBvc2l0aW9uOiBzdGlja3k7CiAgdG9wOiAtMTZweDsKICB3aWR0aDogMTAwJTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAkdHJhbnNwLWxpZ2h0LWFjY2VudDsKICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoOHB4KTsKCiAgcGFkZGluZzogMC41cmVtIDA7CiAgQGluY2x1ZGUgZnMoLTEpOwogIGZvbnQtd2VpZ2h0OiA0NDA7CiAgei1pbmRleDogMTsKfQoKLnN0YWxlbmVzcyB7CiAgZm9udC13ZWlnaHQ6IDQwMDsKICBAaW5jbHVkZSBmcygtMSk7CiAgY29sb3I6ICM0NDQ7CiAgYSB7CiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsKICAgIGN1cnNvcjogcG9pbnRlcjsKICB9Cn0K"},{"version":3,"sources":["Search.vue"],"names":[],"mappings":";AAmMA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Search.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"search\">\n    <button @click=\"filterSigns()\">Search selection</button>\n    <div id=\"results\">\n      <template v-if=\"requestedSearch\">\n        <p id=\"results-header\">\n          Showing {{ preparedResults.length }} result{{\n            preparedResults.length != 1 ? \"s\" : \"\"\n          }}\n          between {{ durationOfSelectionString }}.\n          <br />\n          <span class=\"staleness\" v-if=\"staleResults\"\n            >Your selection has changed.\n            <a @click=\"filterSigns()\">Update</a> results?</span\n          >\n        </p>\n        <search-result\n          v-for=\"(sign, i) in preparedResults\"\n          :key=\"`filtered-sign-${i}`\"\n          :sign=\"sign.sign\"\n          :img-src=\"sign.img_src\"\n          :hands=\"'hands' in sign ? sign.hands : ''\"\n          :handshape=\"'handshape' in sign ? sign.handshape : ''\"\n          :location=\"'location' in sign ? sign.location : ''\"\n          :movement=\"'movement' in sign ? sign.movement : ''\"\n        />\n      </template>\n    </div>\n  </div>\n</template>\n\n<script>\nimport SearchResult from \"./SearchResult.vue\";\n\nexport default {\n  name: \"Search\",\n  components: { SearchResult },\n  data() {\n    return {\n      durationOfSelectionString: \"\",\n      requestedSearch: false,\n      staleResults: true,\n      filteredSigns: [],\n    };\n  },\n  computed: {\n    preparedResults: function () {\n      let signs = [],\n        n = this.filteredSigns.length, // number of cols\n        indexes = new Array(n).fill(0), // internal pointer in each col\n        cols = [...Array(n).keys()]; // which cols are still available?\n      //console.log(\"The signs are: \" + JSON.stringify(this.filteredSigns));\n      //console.log(\"The signs (shortened) are: \" + JSON.stringify(this.filteredSigns.signs));\n      console.log(\n        \"The indexes are: \" +\n          this.signs +\n          \", Length: \" +\n          this.signs[0].signs.length\n      );\n      console.log(\"The columns are: \" + cols + \", Length: \" + cols.length);\n\n      let largestIndexLength = 0;\n      for (const i in indexes) {\n        if (this.signs[i].signs.length > largestIndexLength) {\n          largestIndexLength = this.signs[i].signs.length;\n          console.log(\"New Length! Now \" + largestIndexLength);\n        }\n      }\n      console.log(\"The largest index is \" + largestIndexLength);\n\n      /* while (cols.length > 0) {\n          cols.forEach((col,indexCol)=>{\n            results.push(this.filteredSigns[col].signs[0]);\n            this.filteredSigns[col].signs.splice(0,1);\n          })\n        }*/\n\n      for (\n        let indexNumber = 0;\n        indexNumber < largestIndexLength;\n        indexNumber++\n      ) {\n        // y\n        for (const indexColumn in cols) {\n          // x\n          if (\n            JSON.stringify(\n              this.filteredSigns[cols[indexColumn]].signs[indexNumber]\n            ) != undefined\n          ) {\n            console.log(\n              indexColumn +\n                \", \" +\n                indexNumber +\n                \"; \" +\n                JSON.stringify(\n                  this.filteredSigns[cols[indexColumn]].signs[indexNumber]\n                )\n            );\n            signs.push(\n              this.filteredSigns[cols[indexColumn]].signs[indexNumber]\n            );\n          }\n        }\n      }\n      /*while (signs.length < 50 && cols.length > 0) {\n          let i = parseInt(Math.random() * cols.length);\n          signs.push(this.filteredSigns[cols[i]].signs[indexes[cols[i]]]);\n          indexes[cols[i]]++;\n          if (this.filteredSigns[cols[i]].signs.length == indexes[cols[i]]) {\n            cols.splice(i, 1);\n          }\n          //console.log(\"Current location: Col \" + cols[i] + \", index \" + indexes[cols[i]] );\n          //console.log(\"Column length: \" + cols.length);\n        }*/\n      console.log(\"The indexes are: \" + indexes);\n      console.log(\"The columns are: \" + cols);\n\n      return signs;\n    },\n  },\n  methods: {\n    resetResults: function () {\n      this.requestedSearch = false;\n    },\n    filterSigns: function () {\n      // debugger; // eslint-disable-line no-debugger\n      this.requestedSearch = true;\n\n      let threshold = 1 / 2;\n      this.filteredSigns = [];\n      this.signs.forEach((sign) => {\n        let sel = {\n          start: this.selection.start * this.duration,\n          end: this.selection.end * this.duration,\n        };\n        if (sel.start <= sign.end && sel.end >= sign.start) {\n          let overlap =\n              Math.min(sel.end, sign.end) - Math.max(sel.start, sign.start),\n            signDuration = sign.end - sign.start,\n            ratio = overlap / signDuration;\n          if (ratio >= threshold) {\n            this.filteredSigns.push(sign);\n          }\n        }\n      });\n\n      this.durationOfSelectionString = `${\n        Math.round(this.selection.start * this.duration * 10) / 10\n      } and ${\n        Math.round(this.selection.end * this.duration * 10) / 10\n      } seconds`;\n\n      this.staleResults = false;\n\n      let params = {\n        current_step: this.currentStep,\n        start: this.selection.start * this.duration,\n        end: this.selection.end * this.duration,\n        results_count: this.filteredSigns.length,\n        signs: this.preparedResults.map((el) => {\n          return el.sign;\n        }),\n      };\n      this.$saveAction(\"search\", params);\n    },\n  },\n  watch: {\n    selection: function (newVal, oldVal) {\n      if (newVal.start != oldVal.start || newVal.end != oldVal.end) {\n        this.staleResults = true;\n      }\n    },\n  },\n  props: {\n    currentStep: { type: Number, default: -1 },\n    signs: {\n      type: Array,\n      default: () => [],\n    },\n    selection: {\n      type: Object,\n      default: function () {\n        return {\n          start: 0,\n          end: 1,\n        };\n      },\n    },\n    duration: { type: Number, default: 0 },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"@/assets/styles/_variables.scss\";\n@import \"@/assets/styles/_mixins.scss\";\n\nbutton {\n  border: none;\n  background-color: $accent;\n  font-weight: 600;\n  @include fs(0);\n  padding: 0.5rem 1rem;\n  width: 100%;\n  cursor: pointer;\n  user-select: none;\n  &:hover {\n    background-color: $accent;\n  }\n  &:active {\n    transform: translateY(1px);\n  }\n}\n\n#results {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  margin-top: 16px;\n  gap: 16px;\n}\n\n#results-header {\n  grid-column: 1 / -1;\n  position: sticky;\n  top: -16px;\n  width: 100%;\n  background-color: $transp-light-accent;\n  backdrop-filter: blur(8px);\n\n  padding: 0.5rem 0;\n  @include fs(-1);\n  font-weight: 440;\n  z-index: 1;\n}\n\n.staleness {\n  font-weight: 400;\n  @include fs(-1);\n  color: #444;\n  a {\n    text-decoration: underline;\n    cursor: pointer;\n  }\n}\n</style>\n"]}]}